---

- name: WildFly | Ensure WildFly group exists
  group:
    name: "{{ wildfly_group }}"

- name: WildFly | Ensure WildFly user exists
  user:
    name: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"
    shell: "{{ wildfly_user_shell }}"
    createhome: yes
    home: "{{ wildfly_user_home }}"
    uid: "{{ wildfly_user_uid }}"
    state: present

- name: WildFly | Create log path
  file:
    path: "{{ wildfly_log_file_path }}"
    state: directory
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"

- name: WildFly | Create home path
  file:
    path: "{{ wildfly_home_path }}"
    state: directory
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"

- name: WildFly | Check if service is running
  command: systemctl status wildfly.service
  ignore_errors: yes
  changed_when: false
  no_log: true
  register: service_wildfly_status

- name: WildFly | Check installed version (1/2)
  command: >
    {{ wildfly_bin_path }}/jboss-cli.sh -c --commands=":read-attribute(name=product-version)"
  register: wildfly_check
  changed_when: false
  ignore_errors: true
  no_log: true
  when: service_wildfly_status is success

- name: WildFly | Check installed version (2/2)
  set_fact:
    wildfly_check_version: "\"result\" => \"{{ wildfly_version }}\""
  when:
    - service_wildfly_status is success
    - wildfly_check is defined

- name: WildFly | Download & extract wildfly
  unarchive:
    extra_opts: ['--strip-components=1']
    src: "{{ wildfly_url }}"
    remote_src: true
    dest: "{{ wildfly_home_path }}"
    owner: "{{ wildfly_user }}"
    group: "{{ wildfly_group }}"
    mode: 0750
  when: |
      "Loaded: not-found" in service_wildfly_status.stdout or
      "service could not be found" in service_wildfly_status.stderr or
      (wildfly_check_version is defined and wildfly_check_version not in wildfly_check.stdout)

- name: WildFly | Copy Daemon script
  template:
    src: wildfly.service.j2
    dest: /lib/systemd/system/wildfly.service
    mode: 0644
  notify: restart WildFly
